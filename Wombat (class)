import greenfoot.*;  // (World, Actor, GreenfootImage, and Greenfoot)

import java.util.List;
import java.util.ArrayList;
public class Wombat extends Actor
{
    private static final int EAST = 0;
    private static final int WEST = 1;
    private static final int NORTH = 2;
    private static final int SOUTH = 3;

    private int direction;
    private int leavesEaten;
    private int hp=50;
    int countHp=hp;
    private int steps=50;
    boolean isDead=false;
    private Counter healthCounter = new Counter("hp:");
    private int stonesEaten;
    public Wombat()
    {
        setDirection(EAST);
        leavesEaten = 0;
        
    }

    /**
     * Do whatever the wombat likes to to just now.
     */
    public void act()
    {
        healthCounter.setValue(hp);
        if(foundLeaf()){

            eatLeaf();

        }
        if(foundStone()){
            if(foundLeaf())
                eatLeaf();
            eatStone();
        }
        else if(canMove()) {
            move();

        }
        else {
            turnLeft();
        }

        if (countHp<=-1){
            dies();
            isDead=true;
        }
        if(!isDead){
            WombatWorld ww=(WombatWorld)getWorld();
            ww.updateCounter(countHp);

        }

    }

    public void dies(){
        getWorld().removeObject(this);
    }

    /**
     * Check whether there is a leaf in the same cell as we are.
     */
    public boolean foundLeaf()
    {
        Actor leaf = getOneObjectAtOffset(0, 0, Leaf.class);
        if(leaf != null) {
            return true;
        }
        else {
            return false;
        }
    }

    public boolean foundStone()
    {
        Actor leaf = getOneObjectAtOffset(0, 0, Stone.class);
        if(leaf != null) {
            return true;
        }
        else {
            return false;
        }
    }
    
    /**
     * Eat a leaf.
     */
    public void eatLeaf()
    {
        Actor leaf = getOneObjectAtOffset(0, 0, Leaf.class);
        if(leaf != null) {
            // eat the leaf.
            if(steps>50){
                getWorld().removeObject(leaf);
                leavesEaten = leavesEaten + 1;
                countHp=countHp+25;}
            else if(canMove()){
                move();
            }
            else{
                turnLeft();
            }
        }
        
        //else if(canMove()) {
        // move();
        //}
        //else 
        // turnLeft();
    }

    public void eatStone()
    {
        Actor stone = getOneObjectAtOffset(0, 0, Stone.class);
        if(stone != null){
            if(leavesEaten>4){
                getWorld().removeObject(stone);
                leavesEaten = leavesEaten -5;
                stonesEaten=stonesEaten+1;
            }
            if(canMove()) {
                move();
            }
            else 
                turnLeft();
        }
    }

    /**
     * Move one cell forward in the current direction.
     */
    public void move()
    {    
        steps=steps+1;
        if(steps>50)
            countHp=countHp-1;

        if (!canMove()) {
            return;
        }
        switch(direction) {
            case SOUTH :
                setLocation(getX(), getY() + 1);
                break;
            case EAST :
                setLocation(getX() + 1, getY());
                break;
            case NORTH :
                setLocation(getX(), getY() - 1);
                break;
            case WEST :
                setLocation(getX() - 1, getY());
                break;
        }

    }

    /**
     * Test if we can move forward. Return true if we can, false otherwise.
     */
    public boolean canMove()
    {
        World myWorld = getWorld();
        int x = getX();
        int y = getY();
        switch(direction) {
            case SOUTH :
                y++;
                break;
            case EAST :
                x++;
                break;
            case NORTH :
                y--;
                break;
            case WEST :
                x--;
                break;
        }
        // test for outside border
        if (x >= myWorld.getWidth() || y >= myWorld.getHeight()) {
            return false;
        }
        else if (x < 0 || y < 0) {
            return false;
        }
        else if (!foundStone());

        return true;
    }

    /**
     * Turns towards the left.
     */
    public void turnLeft()
    {
        switch(direction) {
            case SOUTH :
                setDirection(EAST);
                break;
            case EAST :
                setDirection(NORTH);
                break;
            case NORTH :
                setDirection(WEST);
                break;
            case WEST :
                setDirection(SOUTH);
                break;
        }
    }

    /**
     * Sets the direction we're facing. The 'direction' parameter must
     * be in the range [0..3].
     */
    public void setDirection(int direction)
    {
        if ((direction >= 0) && (direction <= 3)) {
            this.direction = direction;
        }
        switch(direction) {
            case SOUTH :
                setRotation(90);
                break;
            case EAST :
                setRotation(0);
                break;
            case NORTH :
                setRotation(270);
                break;
            case WEST :
                setRotation(180);
                break;
            default :
                break;
        }
    }

    /**
     * Tell how many leaves we have eaten.
     */
    public int getLeavesEaten()
    {
        return leavesEaten;
    }

    public int getStonesEaten()
    {
        return stonesEaten;
    }
}
